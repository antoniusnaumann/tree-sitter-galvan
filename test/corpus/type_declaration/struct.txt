====================
Empty
====================

type Empty

---

(source
  (type_declaration
    (empty_struct
      (type_keyword)
      (type_ident))))

====================
With field
====================

type StructWithField {
  a: Int
}

---

(source
  (type_declaration
    (struct
      (type_keyword)
      (type_ident)
      (brace_open)
      (struct_field
        (ident)
        (colon)
        (type_item
          (basic_type
            (type_ident))))
      (brace_close))))

====================
With generic field
====================

type StructWithGenericField {
  a: something
}

---

(source
  (type_declaration
    (struct
      (type_keyword)
      (type_ident)
      (brace_open)
      (struct_field
        (ident)
        (colon)
        (type_item
          (generic_type
            (ident))))
      (brace_close))))


====================
Without field
====================

type EmptyStruct {}

---

(source
  (type_declaration
    (struct
      (type_keyword)
      (type_ident)
      (brace_open)
      (brace_close))))

====================
Public
====================

pub type EmptyStruct {}

---

(source
  (type_declaration
    (struct
      (visibility
        (pub_keyword))
      (type_keyword)
      (type_ident)
      (brace_open)
      (brace_close))))

====================
Comma-separated
====================

type EmptyStruct { a: Int, b: String }

---

(source
  (type_declaration
    (struct
      (type_keyword)
      (type_ident)
      (brace_open)
      (struct_field
        (ident)
        (colon)
        (type_item
          (basic_type
            (type_ident))))
      (struct_field
        (ident)
        (colon)
        (type_item
          (basic_type
            (type_ident))))
      (brace_close))))

====================
Newline-separated
====================

type EmptyStruct {
  a: Int
  b: String
}

---

(source
  (type_declaration
    (struct
      (type_keyword)
      (type_ident)
      (brace_open)
      (struct_field
        (ident)
        (colon)
        (type_item
          (basic_type
            (type_ident))))
      (struct_field
        (ident)
        (colon)
        (type_item
          (basic_type
            (type_ident))))
      (brace_close))))

====================
Complex fields
====================

type ComplexFields {
  a: Int!,
  b: { String : [Float?] }
}

---

(source
  (type_declaration
    (struct
      (type_keyword)
      (type_ident)
      (brace_open)
      (struct_field
        (ident)
        (colon)
        (type_item
          (result_type
            (type_item
              (basic_type
                (type_ident)))
            (exclamation_mark))))
      (struct_field
        (ident)
        (colon)
        (type_item
          (dict_type
            (brace_open)
            (type_item
              (basic_type
                (type_ident)))
            (colon)
            (type_item
              (array_type
                (bracket_open)
                (type_item
                  (optional_type
                    (type_item
                      (basic_type
                        (type_ident)))
                  (question_mark)))
                (bracket_close)))
              (brace_close))))
      (brace_close))))

====================
Ref field
====================

type Cat {
  name: String,
  ref servant: Human
}

---

(source
  (type_declaration
    (struct
      (type_keyword)
      (type_ident)
      (brace_open)
      (struct_field
        (ident)
        (colon)
        (type_item
          (basic_type
            (type_ident))))
      (struct_field
        (declaration_modifier
          (ref_keyword))
        (ident)
        (colon)
        (type_item
          (basic_type
            (type_ident))))
      (brace_close))))

====================
Mut field
====================

type Cat {
  name: String,
  // Note: This is not allowed - but the parser should allow it so that we can emit an error here
  mut servant: Human
}

---

(source
  (type_declaration
    (struct
      (type_keyword)
      (type_ident)
      (brace_open)
      (struct_field
        (ident)
        (colon)
        (type_item
          (basic_type
            (type_ident))))
      (comment)
      (struct_field
        (declaration_modifier
          (mut_keyword))
        (ident)
        (colon)
        (type_item
          (basic_type
            (type_ident))))
      (brace_close))))

